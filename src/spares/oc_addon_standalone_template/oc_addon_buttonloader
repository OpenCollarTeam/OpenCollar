/*
    This file is a part of OpenCollar.
    Copyright ©2021
    : Contributors :
    Phidoux (taya.Maruti)
        * Sep  2 2023 - Created this Script that loads a large number of buttons as an example of how the api works.
*/

//integer CMD_ZERO                = 0;
//integer CMD_OWNER               = 500;
//integer CMD_TRUSTED             = 501;
//integer CMD_GROUP               = 502;
integer CMD_WEARER              = 503;
//integer CMD_EVERYONE            = 504;
//integer CMD_BLOCKED             = 598; // <--- Used in auth_request, will not return on a CMD_ZERO

integer DIALOG                  = -9000; // send a message to oc_addon_menu to generate dialog.
integer DIALOG_RESPONSE         = -9001; // reutrn the button pressed to the external script.
integer DIALOG_TIMEOUT          = -9002;
integer MENU_REQUEST            = -9003; // Request a menu from another script.
integer MENU_REGISTER           = -9004; // Register a button to Main menu.
integer MENU_REMOVE             = -9005; // Remove a button from Main menu.
integer MENU_RESPONCE           = -9006; // Responce from Registration or Removal of button.
integer TO_COLLAR               = 9000; // 

string UPMENU = "BACK";
list g_lCheckBoxes = ["▢","▣"];
list g_lButtons = ["SubMenu","Button1","Button2","Button3","Button4","Button5","Button6","Button7","Button8","Button9","Button10","Button11","Button12","Button13","Button14"];
integer g_iMenuTimer = 180;

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iAuth, string sName,integer iTimer)
{
    if(iTimer < 60)
    {
        // we want the minimum menu timer to be 60s this is not nessary as its doen in the main menu but better safe than sorry.
        iTimer = 60;
    }
    llMessageLinked( LINK_SET, DIALOG, sPrompt+"^"+llDumpList2String(lChoices,"`")+"^"+llDumpList2String(lUtilityButtons,"`")+"^"+(string)iAuth+"^"+sName+"^"+(string)iTimer, kID);
}

Menu(key kID, integer iAuth)
{
    string sPrompt      = "|=====Button Loader Submenu===|";
    list lButtons       = [];
    
    if(iAuth == CMD_WEARER && (integer)llLinksetDataRead("addon_noaccess"))
    {
        // the user is not authorized when this is in place.
        sPrompt += "\n!!! No Authorization !!!";
        lButtons = ["-"];
    }
    else
    {
        // this is where buttons or authorized users are created.
        sPrompt += "\nThis is a sub menu of the button loader plugin.";
        lButtons = ["Example"];
    }
    Dialog(kID, sPrompt, lButtons, [UPMENU], iAuth, "Menu~Buttons",g_iMenuTimer);
}

register_buttons()
{
    // register buttons in list g_lButtons
    integer iIndex;
    integer iEnd = llGetListLength(g_lButtons);
    for ( iIndex = 0; iIndex < iEnd; iIndex++)
    {
        if(llSubStringIndex(llLinksetDataRead("menu_main"),llList2String(g_lButtons,iIndex)) == -1)
        {
            llMessageLinked( LINK_SET, MENU_REGISTER, llList2String(g_lButtons,iIndex), "");
        }
    }
}

default
{
    
    linkset_data(integer iAction, string sName, string sValue)
    {
        if(iAction == LINKSETDATA_UPDATE)
        {
            if( sName == "addon_ready" && (integer)sValue) // this is what the addon_ready flag is for.
            {
                // we want the main menu of this script as a button for the addon.
                register_buttons();
            }
        }
    }
    
    link_message(integer iLink, integer iNum, string sMsg, key kID)
    {
        if(iNum == DIALOG_RESPONSE)
        {
            // we process the responce form the menu here.
            list lPar = llParseString2List(sMsg,[","],[]);
            integer iAuth = llList2Integer(lPar,0);
            string sMenu = llList2String(lPar,1);
            sMsg = llList2String(lPar,2);
            integer iRespring = TRUE;
            if( sMenu == "Menu~Buttons")
            {
                if (sMsg == UPMENU)
                {
                    iRespring = FALSE;
                    llMessageLinked(LINK_SET, MENU_REQUEST, (string)iAuth+"|MenuMain",kID);
                }
                else if(sMsg == "Example")
                {
                    llInstantMessage(kID,"This is an example from sub menu");
                }
                if(iRespring)
                {
                    Menu(kID, iAuth);
                }
            }
        }
        else if(iNum == MENU_REQUEST)
        {
            // process the information from menu request or main menu buttons.
            list lPar = llParseString2List(sMsg,["|"],[]);
            integer iAuth = llList2Integer(lPar,0);
            string sMenu = llList2String(lPar,1);
            if(sMenu == "SubMenu")
            {
                Menu(kID,iAuth);
            }
            else
            {
                llInstantMessage(kID,sMenu+" is an example main menu button");
            }
        }
    }
}
