
/*
This file is a part of OpenCollar.
Copyright ©2023
: Contributors :

        Nov 2023 -- created by YostyB7 with modifications by Medea Destiny    
    
*/    

string g_sApp = "Weld";
key g_kWelder;

integer CMD_OWNER = 500;
//integer CMD_TRUSTED = 501;
//integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
//integer CMD_EVERYONE = 504;

integer NOTIFY = 1002;
integer NOTIFY_OWNERS=1003;
//integer REBOOT = -1000;

integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer MENUNAME_REQUEST = 3000;
integer MENUNAME_RESPONSE = 3001;
//integer MENUNAME_REMOVE = 3003;

integer TIMEOUT_FIRED = 30499;

integer AUTH_REQUEST = 600;
integer AUTH_REPLY=601;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
//string UPMENU = "BACK";
//string ALL = "ALL";

key g_kWeldby;
integer g_iWelded;
integer g_iLocked;

Dialog(key kAv, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    
    if(sName == "weld"){
        if(g_iWelded){
            sPrompt = "\n\n* This collar is Welded by secondlife:///app/agent/"+llLinksetDataRead("intern_weldby")+"/about * \n\nOnly an owner may initiate unwelding.";

            lChoices = ["Unweld"];
            
        }else{
            sPrompt="\n\nThis app will let you weld the collar, which removes the ability to unlock.\n\n⚠ Proceed with caution ⚠\nWelding is semi-perminent and can only be undone by an owner AND the wearer together.";

            if(!g_iLocked){
                sPrompt += "\n\nThe collar is not locked yet.\nBefore you can weld, you must lock it first.";
                lChoices = ["Lock"];
            }else{
                lChoices = ["Weld Now"];
            }
        }
        lChoices += ["Help","BACK"];
    }
    
    llMessageLinked(LINK_SET, DIALOG, (string)kAv + "|" + sPrompt + "\n|"+(string)iPage+"|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, sName+"~"+llGetScriptName());
}

UserCommand(integer iAuth, string sStr, key kAv) {
    list lParameters = llParseString2List(sStr, [" "], []);
    string sChangetype = llList2String(lParameters,0);
    string sChangevalue = llList2String(lParameters,1);
    if(sChangetype == "menu"){
        if(sChangevalue == g_sApp){ // Weld button pressed
            Dialog(kAv,"",[],[],0,iAuth,"weld");
        }
    }
}

default
{
    state_entry(){
    }
    
    link_message(integer iSender,integer iNum,string sStr,key kID){
        if(iNum >= CMD_OWNER && iNum <= CMD_WEARER) {
            if(llToLower(sStr)=="menu "+llToLower(g_sApp)) Dialog(kID,"",[],[],0,iNum,"weld");            
        }else if (iNum == MENUNAME_REQUEST  && sStr == "Apps") {
            llMessageLinked(LINK_SET, MENUNAME_RESPONSE, "Apps|"+g_sApp, ""); 
        } else if(iNum == DIALOG_RESPONSE){          
            integer iPos = llSubStringIndex((string)kID, "~"+llGetScriptName());
            if(iPos>0){
                string sMenu = llGetSubString(kID, 0, iPos-1);
                list lMenuParams = llParseString2List(sStr, ["|"],[]);
                key kAv = llList2Key(lMenuParams,0);
                string sButton = llList2String(lMenuParams,1);
                integer iAuth = llList2Integer(lMenuParams,3);
                if(sMenu == "weld"){
                    if(sButton == "Weld Now"){
                        if(iAuth==CMD_OWNER){
                            if(g_iLocked){
                                g_kWelder = kAv;                        
                                llMessageLinked(LINK_SET, NOTIFY, "1secondlife:///app/agent/"+(string)g_kWelder+"/about is attempting to weld the collar. Wearer consent is required.", kAv);
                                Dialog(llGetOwner(), "[WELD CONSENT REQUIRED]\n\nsecondlife:///app/agent/"+(string)kAv+"/about wants to weld your collar.  If you disagree with this action, press no.", ["Yes", "No"], [], 0, iAuth, "weld~consent");
                            } else {
                                llMessageLinked(LINK_SET,NOTIFY,"0You have to first lock the collar before you can weld it.", kAv);
                            }
                        } else llMessageLinked(LINK_SET,NOTIFY,"0Only an owner may intitiate a weld.", kAv);
                        
                    }else if(sButton == "Unweld"){
                        if(iAuth==CMD_OWNER){
                            g_kWelder = kAv;
                            llMessageLinked(LINK_SET, NOTIFY, "1secondlife:///app/agent/"+(string)g_kWelder+"/about intends to unweld the collar.", kAv);
                            Dialog(llGetOwner(), "[UNWELD CONSENT REQUIRED]\n\nsecondlife:///app/agent/"+(string)kAv+"/about wants to unweld your collar.  If you disagree with this action, press no.", ["Yes", "No"], [], 0, iAuth, "unweld~consent");
                        }
                        else{
                            llMessageLinked(LINK_SET,NOTIFY,"0%NOACCESS% to unwelding. Only an owner can initiate this.", kAv);
                            Dialog(kAv,"",[],[],0,iAuth,"weld");
                        }
                                            
                    }else if(sButton == "Lock"){
                        llMessageLinked(LINK_SET, 0, "lock", kAv);
                        llSleep(1);
                        Dialog(kAv,"",[],[],0,iAuth,"weld");
                        
                    }else if(sButton == "Help"){
                        llLoadURL(kAv, "\n\nGo to page for the Weld and Unweld guide.\n\n", "https://opencollar.cc/docs/Weld");
                        
                    }else if(sButton == "BACK") llMessageLinked(LINK_SET, iAuth, "menu Apps", kAv);
                }else if(sMenu == "unweld~consent"){ 
                   if(sButton == "No"){
                        llMessageLinked(LINK_SET, NOTIFY, "1Wearer does not consent to unwelding this collar.", g_kWelder);
                        llMessageLinked(LINK_SET, 0, "menu Weld", g_kWelder); 
                    } else {
                        // do unweld
                        if(g_kWelder){
                            g_iWelded=FALSE;
                            llMessageLinked(LINK_SET,LM_SETTING_DELETE, "intern_weldby","");
                            llMessageLinked(LINK_SET,LM_SETTING_DELETE, "intern_weld","");
                            llMessageLinked(LINK_SET, NOTIFY_OWNERS, "%WEARERNAME%'s collar has been unwelded", g_kWelder);
                            llMessageLinked(LINK_SET, NOTIFY, "1UnWeld completed", llGetOwner());
                            llMessageLinked(LINK_SET, 0, "menu Weld", g_kWelder);
                        }
                    }
                    g_kWelder=NULL_KEY;                            
                }else if(sMenu == "weld~consent"){
                    if(sButton == "No"){
                        llMessageLinked(LINK_SET, NOTIFY, "1Wearer does not consent to welding this collar.", g_kWelder);
                        llMessageLinked(LINK_SET, 0, "menu Weld", g_kWelder);      
                    } else {
                        // do weld
                        if(g_kWelder){                            
                            llMessageLinked(LINK_SET, LM_SETTING_SAVE, "intern_weld=1", "");
                            llMessageLinked(LINK_SET, LM_SETTING_SAVE, "intern_weldby="+(string)g_kWelder, ""); 
                            llMessageLinked(LINK_SET, NOTIFY_OWNERS, "%WEARERNAME%'s collar has been welded", g_kWelder);
                            llMessageLinked(LINK_SET, NOTIFY, "1Weld completed", llGetOwner());
                            llMessageLinked(LINK_SET, 0, "menu Weld", g_kWelder);
                        }
                    }
                    g_kWelder = NULL_KEY;
                }
            }
        } else if(iNum == LM_SETTING_RESPONSE){
            list lSettings = llParseString2List(sStr, ["_","="],[]);
            string sToken = llList2String(lSettings,0);
            string sVar = llList2String(lSettings,1);
            string sVal = llList2String(lSettings,2);
            if(sToken=="global"){
                if(sVar=="locked") g_iLocked=(integer)sVal;
            }else if(sToken=="intern") {
                if(sVar=="weldby") g_kWeldby=(key)sVal;
                else if(sVar=="weld") g_iWelded=(integer)sVal;
            }
        } else if(iNum == LM_SETTING_DELETE){
            list lPar = llParseString2List(sStr, ["_"],[]);
            string sToken = llList2String(lPar,0);
            string sVar = llList2String(lPar,1);
            if(sToken=="global"){
                if(sVar == "locked") g_iLocked=FALSE;
            } else if(sToken=="intern") {
                if(sVar=="weld"){
                     g_kWeldby="";
                     g_iWelded=FALSE;
                }
            }
        }
    }
}
